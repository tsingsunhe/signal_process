

# rnn ecg personal identify

import tensorflow as tf
import numpy as np
import scipy.io as sio


# data generate part------------
data01 = sio.loadmat('rnn_id01.mat')
array01 = data01['rnn_id01']
data02 = sio.loadmat('rnn_id02.mat')
array02 = data02['rnn_id02']
data03 = sio.loadmat('rnn_id03.mat')
array03 = data03['rnn_id03']
data04 = sio.loadmat('rnn_id04.mat')
array04 = data04['rnn_id04']
data05 = sio.loadmat('rnn_id05.mat')
array05 = data05['rnn_id05']

print(array01.shape)
print(array02.shape)
print(array03.shape)
print(array04.shape)
print(array05.shape)


train_data = []
for i in range(500):
    a1 = array01[i, :]
    a2 = array02[i, :]
    a3 = array03[i, :]
    a4 = array04[i, :]
    a5 = array05[i, :]
    train_data.append(a1)
    train_data.append(a2)
    train_data.append(a3)
    train_data.append(a4)
    train_data.append(a5)
train_data = np.asarray(train_data)
train_data = np.reshape(train_data, (-1, 640))
print(len(train_data))

train_label = [1, 2, 3, 4, 5]*500
train_label = np.asarray(train_label)
train_label = np.reshape(train_label, (-1, 1))
print(len(train_label))
print(train_data.shape)




def dense_to_one_hot(labels_dense, num_classes=10):
  """Convert class labels from scalars to one-hot vectors."""
  num_labels = labels_dense.shape[0]
  index_offset = np.arange(num_labels) * num_classes
  labels_one_hot = np.zeros((num_labels, num_classes))
  labels_one_hot.flat[index_offset + labels_dense.ravel()-1] = 1
  return labels_one_hot
train_label = dense_to_one_hot(train_label,5)

# lstm cell ------------------------------
def RNN(X, weights, biases):
    # hidden layer for input
    X = tf.reshape(X, [-1, n_inputs])
    X_in = tf.matmul(X, weights['in']) + biases['in']
    X_in = tf.reshape(X_in, [-1, n_steps, n_hidden_units])

    # cell
    with tf.variable_scope("rcnn", reuse=None):
        lstm_cell = tf.contrib.rnn.BasicLSTMCell(n_hidden_units, forget_bias=1.0, state_is_tuple=True)
        _init_state = lstm_cell.zero_state(batch_size, dtype=tf.float32)
        outputs, states = tf.nn.dynamic_rnn(lstm_cell, X_in, initial_state=_init_state, time_major=False)

    # hidden layer for output as the final results
    # results = tf.matmul(states[1], weights['out']) + biases['out']
    # or
    outputs = tf.unstack(tf.transpose(outputs, [1, 0, 2]))
    results = tf.matmul(outputs[-1], weights['out']) + biases['out']

    return results


# parameters init
l_r = 0.0001
training_iters = 10000
batch_size = 2500

n_inputs = 32
n_steps = 20
n_hidden_units = 100
n_classes = 5

#define placeholder for input
x = tf.placeholder(tf.float32, [None, n_steps, n_inputs])
y = tf.placeholder(tf.float32, [None, n_classes])

# define w and b
weights = {
    'in': tf.Variable(tf.random_normal([n_inputs,n_hidden_units])),
    'out': tf.Variable(tf.random_normal([n_hidden_units,n_classes]))
}
biases = {
    'in': tf.Variable(tf.constant(0.1,shape=[n_hidden_units,])),
    'out': tf.Variable(tf.constant(0.1,shape=[n_classes,]))
}

pred = RNN(x, weights, biases)
cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred,labels=y))
train_op = tf.train.AdamOptimizer(l_r).minimize(cost)

correct_pred = tf.equal(tf.argmax(pred,1),tf.argmax(y,1))
accuracy = tf.reduce_mean(tf.cast(correct_pred,tf.float32))

#init session
sess = tf.Session()
#init all variables
sess.run(tf.global_variables_initializer())
#start training

#for i in range(training_iters):
for i in range(training_iters):
    #get batch to learn easily
    #batch_x, batch_y = mnist.train.next_batch(batch_size)
    #batch_x = batch_x.reshape([batch_size, n_steps, n_inputs])
    # sess.run(train_op,feed_dict={x: batch_x, y: batch_y})

    batch_x = train_data
    batch_y = train_label
    batch_x = batch_x.reshape([batch_size, n_steps, n_inputs])
    sess.run(train_op, feed_dict={x: batch_x, y: batch_y})
    if i % 50 == 0:
        print(sess.run(accuracy,feed_dict={x: batch_x, y: batch_y,}))
'''
    for k in range(0, 70):
        batch_x = train_data[k * 100:(k + 1) * 100, :]
        batch_y = train_label[k * 100:(k + 1) * 100, :]
        batch_x = batch_x.reshape([batch_size, n_steps, n_inputs])

        sess.run(train_op, feed_dict={x: batch_x, y: batch_y})

        print(sess.run(accuracy, feed_dict={x: batch_x, y: batch_y}))
        '''



#test_data = mnist.test.images.reshape([-1, n_steps, n_inputs])
#test_label = mnist.test.labels
#print("Testing Accuracy: ", sess.run(accuracy, feed_dict={x: test_data, y: test_label}))

